# Unicid Citizen Registry backend


io.unicid.create.token.lifetimeseconds=900
io.unicid.verify.token.lifetimeseconds=900

#
# Identity definition
# Here you can define the attributes that of the credential that will be issued by your service.
#
# Just leave it like that for now.
# If you modify it after having already issued a credential, you should delete /tmp/citizen-registry
# and restart docker-compose
# While in dev mode, update the %dev. properties

io.unicid.identity.def.name=UnicID Identity
io.unicid.identity.def.claim.citizenid=0
io.unicid.identity.def.claim.firstName=1
io.unicid.identity.def.claim.lastName=1
io.unicid.identity.def.claim.avatarName=0
io.unicid.identity.def.claim.avatarPic=0
io.unicid.identity.def.claim.avatarPic.maxdimension=320
io.unicid.identity.def.claim.birthDate=1
io.unicid.identity.def.claim.birthplace=1
io.unicid.identity.def.claim.mrz=1
io.unicid.identity.def.claim.photo=1

%dev.io.unicid.identity.def.name=UnicID Identity
%dev.io.unicid.identity.def.claim.citizenid=0
%dev.io.unicid.identity.def.claim.firstName=0
%dev.io.unicid.identity.def.claim.lastName=0
%dev.io.unicid.identity.def.claim.avatarName=1
%dev.io.unicid.identity.def.claim.avatarPic=1
%dev.io.unicid.identity.def.claim.birthDate=0
%dev.io.unicid.identity.def.claim.birthplace=0
%dev.io.unicid.identity.def.claim.mrz=1
%dev.io.unicid.identity.def.claim.photo=0

#
# Identity recovery
# Here you can define the attributes that will be needed for recovering an identity. 
# While in dev mode, update the %dev. properties

io.unicid.identity.restore.claim.citizenid=0
io.unicid.identity.restore.claim.firstName=1
io.unicid.identity.restore.claim.lastName=1
io.unicid.identity.restore.claim.avatarName=0
io.unicid.identity.restore.claim.birthDate=1
io.unicid.identity.restore.claim.birthplace=1
io.unicid.identity.restore.claim.mrz=1


%dev.io.unicid.identity.restore.claim.citizenid=0
%dev.io.unicid.identity.restore.claim.firstName=0
%dev.io.unicid.identity.restore.claim.lastName=0
%dev.io.unicid.identity.restore.claim.avatarName=1
%dev.io.unicid.identity.restore.claim.birthDate=0
%dev.io.unicid.identity.restore.claim.birthplace=0
%dev.io.unicid.identity.restore.claim.mrz=1

# Welcome message. Available: welcome, welcome2, welcome3.
io.unicid.messages.welcome=welcome to UnicID. Use the contextual menu to get started.
io.unicid.messages.welcome.es=Bienvenido a UnicID. Usa el menú contextual para comenzar.
io.unicid.messages.welcome.fr=Bienvenue sur UnicID. Utilisez le menu contextuel pour commencer.
# Title of the contextual menu
io.unicid.messages.rootmenu.title=\uD83C\uDF0E UnicId Identity Registry
io.unicid.messages.rootmenu.title.es=\uD83C\uDF0E Registro de Identidad de UnicID
io.unicid.messages.rootmenu.title.fr=\uD83C\uDF0E Registre d'Identité UnicID

io.unicid.identity.recoverable.seconds=20
io.unicid.auth.valid.for.minutes=0


io.unicid.protection=WEBRTC

# this url is important for webrtc deploy 
# TODO: maybe is possible use to different variable because this is used to redirect after vision finish 
# %dev.io.unicid.vision.redirdomain=https://2456-2800-e2-a880-8aa-a5b7-3d73-4630-3422.ngrok-free.app
# here replace p3001.testing.2060.io with the ngrok domain name that will forward to port 2903 (the quarkus backend) 
%dev.io.unicid.vision.redirdomain.q=https://2456-2800-e2-a880-8aa-a5b7-3d73-4630-3422.ngrok-free.app
# here replace p3001.testing.2060.io with the ngrok domain name that will forward to port 2904 (the datastore container) 
%dev.io.unicid.vision.redirdomain.d=https://p2804.ovpndev.2060.io/

# should work out of the box with our default testing env
io.unicid.vision.face.capture.url=https://vision-t.gaiaid.io/face/capture/?token=TOKEN
io.unicid.vision.face.verification.url=https://m.vision.2060.io/face/verification/?token=TOKEN
io.unicid.vision.fingerprints.capture.url=https://vision-t.gaiaid.io/fp/capture/?token=TOKEN
io.unicid.vision.fingerprints.verification.url=https://vision-t.gaiaid.io/fp/verification/?token=TOKEN

io.unicid.debug=true

io.twentysixty.sa.res.c.CredentialTypeResource/mp-rest/url=http://sa:3000/
io.twentysixty.sa.res.c.MessageResource/mp-rest/url=http://sa:3000/

# maps to admin API of service-agent container (port 3000) defined in your docker compose

%dev.io.twentysixty.sa.res.c.CredentialTypeResource/mp-rest/url=http://172.26.26.3:2800/
%dev.io.twentysixty.sa.res.c.MessageResource/mp-rest/url=http://172.26.26.3:2800/

io.unicid.registry.res.c.MediaResource/mp-rest/url=http://ds:2904/
# maps to API of datastore container (port 2904) defined in your docker compose
%dev.io.unicid.registry.res.c.MediaResource/mp-rest/url=https://p2804.ovpndev.2060.io/


io.unicid.registry.res.c.WebRtcResource/mp-rest/url=https://dts-webrtc.dev.2060.io/
%dev.io.unicid.registry.res.c.WebRtcResource/mp-rest/url=https://dts-webrtc.dev.2060.io/

io.unicid.registry.res.c.VisionResource/mp-rest/url=https://vision.dev.2060.io/
%dev.io.unicid.registry.res.c.VisionResource/mp-rest/url=https://vision.dev.2060.io/

quarkus.http.host=0.0.0.0
quarkus.http.port=2903


quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=gaia
quarkus.datasource.password=2060demo
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost/gaia
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost/gaia
quarkus.datasource.jdbc.max-size=8
quarkus.datasource.jdbc.min-size=2

quarkus.hibernate-orm.database.generation=update

quarkus.swagger-ui.always-include=true

quarkus.jib.jvm-entrypoint=/bin/sh,run-java.sh

quarkus.container-image.build=true
quarkus.container-image.push=true
quarkus.container-image.group=io2060
quarkus.container-image.registry=registry.hub.docker.com
quarkus.container-image.name=unicid-issuer-dts
quarkus.jib.ports=8080


