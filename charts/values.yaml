# Default values for issuer-vs chart
# If you want to use this chart, you can change the values below
# and then run `helm upgrade --install chart/ --namespace my-namespace
# Update namespaces, domains, and other values as needed.
# You can also enable the vs-agent-chart, vision-matcher-chart, vision-service-chart, and webrtc-server-chart
# by setting the corresponding values to true.
name: issuer-vs
namespace: default
domain: demos.2060.io
replicas: 1
database:
  host: issuer
  user: govidissuer
  pwd: mypassword123
backend:
  webrtc: https://webrtc.demos.2060.io # URL for the webrtc server
  vision: https://vision.demos.2060.io # URL for the vision service
  vsAgentAdminUrl: http://issuer:3000 # URL for the vs-agent admin interface
  port: 2903 # Port for the backend service
  timeout: 900 # Timeout for ID verification in seconds, defined in the backend service for resetting the ID verification process
  logLevel: 3 # Log level for the backend service, default only errors are logged, set to 3 for debug logs

# If you want to use the issuer-vs chart, you can enable it by setting the following:
# vs-agent-chart.enabled: true
vs-agent-chart:
  enabled: false
  name: issuer
  namespace: default
  replicas: 1
  domain: demos.2060.io
  didcommLabel: test-issuer
  eventsBaseUrl: https://issuer-vs.demos.2060.io
  agentInvitationImageUrl: https://i.unic-id-issuer.demos.dev.2060.io/avatar.png
  database:
    enabled: false # Set to true if you want to use a database
    host: localhost
    user: govidissuer
    pwd: mypassword123
  redis: 
    enabled: false # Set to true if you want to use redis
  adminPort: 3000
  agentPort: 3001
  ingress:
    public:
      enableCors: true

  # Recomended extra environment variables for the vs-agent
  # to work with the issuer-vs chart
  extraEnv: 
    - name: ANONCREDS_SERVICE_BASE_URL
      value: https://issuer.demos.2060.io
    - name: REDIRECT_DEFAULT_URL_TO_INVITATION_URL
      value: "true"
    - name: POSTGRES_HOST
      value: "localhost"
    - name: POSTGRES_USER
      value: "govidissuer"
    - name: POSTGRES_PASSWORD
      value: "mypassword123"
    - name: REDIS_HOST
      value: "localhost"
    # uncomment the following line if you want to use redis with a password
    # - name: REDIS_pASSWORD
    #   value: "mypassword123"

# If you want to use the vision-service chart, you can enable it by setting the following:
# vision-service-chart.enabled: true
vision-service-chart:
  enabled: false
  app:
    name: vision-service

  namespace: 
    name: default

  # Ingress configuration
  ingress:
    name: vision-service-demos-ingress
    host: vision.demos.2060.io
    tlsSecret: vision.demos.2060.io-cert

  statefulset:
    name: vision-service
    serviceName: vision-service
    replicas: 1
    containerName: vision-service
    pullPolicy: Always
    storage: 1Gi
    env:
      HOST: "0.0.0.0"
      NUMBER_OF_GESTURES_TO_REQUEST: "2"
      USE_MEDIASOUP_ICE_RELAY: "false"
      VISION_MATCHER_BASE_URL: "http://vision-matcher-service.default:5123"
      ENABLE_DEBUG_ENDPOINTS: "false"

  service:
    name: vision-service
    ports: 5000

  # If you want to use the vision-matcher chart, you can enable it by setting the following:
  # vision-matcher-chart.enabled: true
  vision-matcher-chart:
    enabled: false
    app:
      name: vision-matcher

    namespace:
      name: default

    statefulset:
      name: vision-matcher
      serviceName: vision-matcher
      replicas: 1
      containerName: vision-matcher
      pullPolicy: Always
      storage: 1Gi

    service:
      name: vision-matcher-service
      ports:
        redis: 5123

# If you want to use the webrtc-server chart, you can enable it by setting the following:
# webrtc-server-chart.enabled: true
webrtc-server-chart:
  enabled: false
  namespace:
    name: default
  service:
    name: webrtc-demos-service
  ingress:
    name: webrtc-demos-ingress
    host: webrtc.demos.2060.io
    tlsSecret: webrtc.demos.2060.io-cert
    loadBalancerMode: false
  app:
    name: webrtc-demos
  statefulset:
    name: webrtc-demos
    serviceName: "webrtc-demos-service"
    replicas: 1
    containerName: webrtc-demos-container
    pullPolicy: Always
    storage: 1Gi
    resources:
      requests:
        cpu: "200m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"
  env:
    LOG_LEVEL: "3"
    DEBUG: "*mediasoup* *INFO* *WARN* *ERROR*"
    PROTOO_LISTEN_PORT: "4443"
    MEDIASOUP_CLIENT_PROTOOPORT: "443"
    MEDIASOUP_CLIENT_ENABLE_ICESERVER: "yes"
    MEDIASOUP_CLIENT_ICESERVER_HOST: "xxx.xxx.xxx.xxx"
    MEDIASOUP_CLIENT_ICESERVER_PROTO: "udp"
    MEDIASOUP_CLIENT_ICESERVER_PORT: "3478"
    MEDIASOUP_CLIENT_ICESERVER_USER: "user"
    MEDIASOUP_CLIENT_ICESERVER_PASS: "password"
    MEDIASOUP_INGRESS_HOST: "webrtc.demos.2060.io"
    HTTPS_CERT_FULLCHAIN: "/config/certificates/tls.crt"
    HTTPS_CERT_PRIVKEY: "/config/certificates/tls.key"
  secret:
    name: webrtc.demos.2060.io-cert
